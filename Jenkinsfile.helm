pipeline {
    agent { label 'WSL_Ubuntu' }

    environment {
        IMAGE_NAME = "viniciusemanuelds/projeto-devops"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('An√°lise com SonarQube') {
            steps {
                withSonarQubeEnv('sonar-local') {
                    sh """
                    sonar-scanner \
                    -Dsonar.projectKey=devops-helm \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=http://localhost:9000 \
                    -Dsonar.python.version=3.9
                    """
                }
            }
        }

        stage('Build Backend') {
            steps {
                script {
                    dockerapp = docker.build("${IMAGE_NAME}:${env.BUILD_ID}", "./src/backend")
                }
            }
        }

        stage('Scan de Vulnerabilidades com Trivy') {
            steps {
                script {
                    def exitCode = sh(
                        script: """
                        docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        aquasec/trivy image \
                        --severity CRITICAL \
                        --exit-code 1 \
                        --ignore-unfixed \
                        ${IMAGE_NAME}:${env.BUILD_ID}
                        """,
                        returnStatus: true
                    )
                    if (exitCode != 0) {
                        error "‚ùå Vulnerabilidades CR√çTICAS encontradas na imagem Docker! Build bloqueado."
                    } else {
                        echo "‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada."
                    }
                }
            }
        }


        stage('Push da imagem') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                        dockerapp.push("${env.BUILD_ID}")
                        dockerapp.push("latest")
                    }
                }
            }
        }

        stage('Deploy com Helm') {
            steps {
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    sh """
                    helm upgrade --install devops-helm ./helm-projeto \
                    --namespace devops \
                    --set image.repository=${IMAGE_NAME} \
                    --set image.tag=${env.BUILD_ID}
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                def chuck = chuckNorris()
                def discordWebhook = 'https://discord.com/api/webhooks/1382685385150304287/xfkmxUVMYbJHxSS0mCgeVorMr3rGpVt1t9aDeenptTxcRiIN1GtMYVq2_LcAGcM0msNB'
                def mensagem = """{
                    \"content\": \"üöÄ Deploy com Helm realizado com sucesso! Chuck diz: ${chuck}\"
                }"""

                sh """
                curl -H \"Content-Type: application/json\" \
                    -X POST \
                    -d '${mensagem}' \
                    ${discordWebhook}
                """
            }
        }

        failure {
            script {
                def chuck = chuckNorris()
                def discordWebhook = 'https://discord.com/api/webhooks/1382685385150304287/xfkmxUVMYbJHxSS0mCgeVorMr3rGpVt1t9aDeenptTxcRiIN1GtMYVq2_LcAGcM0msNB'
                def mensagem = """{
                    \"content\": \"‚ö†Ô∏è O deploy com Helm falhou! Chuck diz: ${chuck}\"
                }"""

                sh """
                curl -H \"Content-Type: application/json\" \
                    -X POST \
                    -d '${mensagem}' \
                    ${discordWebhook}
                """
            }
        }
    }
}
